<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Laravel\Socialite\Facades\Socialite;
use Illuminate\Http\RedirectResponse;
use Exception;
use App\Models\User;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

class GoogleController extends Controller
{
    /**
     * Redirect the user to the Google authentication page.
     *
     * @return \Illuminate\Http\Response
     */
    public function redirectToGoogle(): RedirectResponse
    {
        return Socialite::driver('google')->redirect();
    }

    public function handleGoogleCallback(): RedirectResponse
    {
        $user = Socialite::driver('google')->user();

        $existingUser = User::where('google_id', $user->id)->first();

        if ($existingUser) {
            // Log in the existing user.
            auth()->login($existingUser, true);
        } else {
            // Create a new user.
            $newUser = new User();
            $newUser->name = $user->name;
            $newUser->email = $user->email;
            $newUser->google_id = $user->id;
            $newUser->password = bcrypt(request(Str::random())); // Set some random password
            $newUser->save();

            // Log in the new user.
            auth()->login($newUser, true);
        }

         // Redirect to url as requested by user, if empty use /dashboard page as generated by Jetstream
        return redirect()->intended('user.home');
    }
    // public function redirectToGoogle()
    // {
    //     return Socialite::driver('google')->redirect();
    // }

    // /**
    //  * Handle the Google callback.
    //  *
    //  * @return \Illuminate\Http\Response
    //  */
    // public function handleGoogleCallback()
    // {
    //     try {
    //         // Retrieve Google user details
    //         $googleUser = Socialite::driver('google')->user();
    
    //         // Check for an existing user by `google_id` or `email`
    //         $user = User::where('google_id', $googleUser->getId())
    //                     ->orWhere('email', $googleUser->getEmail())
    //                     ->first();
    
    //         if ($user) {
    //             // If the user exists but does not have a `google_id`, update it
    //             if (!$user->google_id) {
    //                 $user->update(['google_id' => $googleUser->getId()]);
    //             }
    //             // Log the user in
    //             Auth::login($user);
    //         } else {
    //             // Extract first and last names from Google user data
    //             $nameParts = explode(' ', $googleUser->getName());
    //             $firstName = $nameParts[0];
    //             $lastName = isset($nameParts[1]) ? $nameParts[1] : ''; // Handle cases where there is no last name
    
    //             // Create a new user with the details from the Google account
    //             $user = User::create([
    //                 'first_name' => $firstName,
    //                 'last_name' => $lastName,
    //                 'email' => $googleUser->getEmail(),
    //                 'password' => Hash::make(Str::random(24)), // Generate a random password since it's OAuth login
    //                 'google_id' => $googleUser->getId(),
    //                 'training_id' => 'N/A', // Adjust these default values as per your application's requirements
    //                 'dep_no' => 'N/A',
    //                 'dep_name' => 'N/A',
    //                 'phone_number' => '0000000000',
    //                 'is_admin' => 0, // Default to non-admin
    //             ]);
    
    //             // Log the newly created user in
    //             Auth::login($user);
    //         }
    
    //         // Redirect to the user's home page
    //         return redirect()->route('user.home');
    //     } catch (Exception $e) {
    //         // Handle any error that occurs during the login process
    //         return redirect('/login')->withErrors(['error' => 'Unable to login with Google.']);
    //     }
    // }
    
    
}
